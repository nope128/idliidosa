Aim -8 Puzzle Single Player Game (A* Algorithm)
Code- 
from time import time
from queue import PriorityQueue
import math
class Puzzle:
    goal_state = [1, 2, 3, 8, 0, 4, 7, 6, 5]
    heuristic = None
    evaluation_function = None
    needs_heuristic = False
    num_of_instances = 0 
    def __init__(self, state, parent, action, path_cost, needs_heuristic=False):
        self.parent = parent
        self.state = state
        self.action = action
        if parent:
            self.path_cost = parent.path_cost + path_cost
        else:
            self.path_cost = path_cost
        if needs_heuristic:
            self.needs_heuristic = True
            self.generate_heuristic()
            self.evaluation_function = self.path_cost + self.heuristic
        else:
            self.evaluation_function = self.path_cost
        Puzzle.num_of_instances += 1   
    def __str__(self):
        return str(self.state[0:3]) + '\n' + str(self.state[3:6]) + '\n' + str(self.state[6:9])
    def generate_heuristic(self):
        self.heuristic = 0
        for num in range(1, 9):
            distance = self.state.index(num)
            goal_index = Puzzle.goal_state.index(num)
            i = int(distance / 3)
            j = int(distance % 3)
            goal_i = int(goal_index / 3)
            goal_j = int(goal_index % 3)
            self.heuristic += abs(i - goal_i) + abs(j - goal_j)
    def goal_test(self):
        if self.state == Puzzle.goal_state:
            return True
        return False
    @staticmethod
    def find_legal_actions(i, j):
        legal_action = ['U', 'D', 'L', 'R']
        if i == 0:
            legal_action.remove('U')
        elif i == 2:
            legal_action.remove('D')
        if j == 0:
            legal_action.remove('L')
        elif j == 2:
            legal_action.remove('R')
        return legal_action
    def generate_child(self):
        children = []
        x = self.state.index(0)
        i = x // 3
        j = x % 3
        legal_actions = Puzzle.find_legal_actions(i, j)
        for action in legal_actions:
            new_state = self.state.copy()
            if action == 'U':
                new_state[x], new_state[x - 3] = new_state[x - 3], new_state[x]
            elif action == 'D':
                new_state[x], new_state[x + 3] = new_state[x + 3], new_state[x]
            elif action == 'L':
                new_state[x], new_state[x - 1] = new_state[x - 1], new_state[x]
            elif action == 'R':
                new_state[x], new_state[x + 1] = new_state[x + 1], new_state[x]
            children.append(Puzzle(new_state, self, action, 1, True))
        return children  
    def find_solution(self):
        solution = []
        solution.append(self.action)
        path = self
        while path.parent is not None:
            path = path.parent
            solution.append(path.action)
        solution = solution[:-1]
        solution.reverse()
        return solution
def Astar_search(initial_state):
    count = 0
    explored = []
    start_node = Puzzle(initial_state, None, None, 0, True)
    q = PriorityQueue()
    q.put((start_node.evaluation_function, count, start_node))
    while not q.empty():
        _, _, node = q.get()
        explored.append(node.state)
        if node.goal_test():
            return node.find_solution()
        children = node.generate_child()
        for child in children:
            if child.state not in explored:
                count += 1
                q.put((child.evaluation_function, count, child))
    return None
state = [
    [1, 3, 4, 8, 6, 2, 7, 0, 5],
    [2, 8, 1, 0, 4, 3, 7, 6, 5],
    [2, 8, 1, 4, 6, 3, 0, 7, 5]
]
for i in range(0, 3):
    Puzzle.num_of_instances = 0
    t0 = time()
    astar = Astar_search(state[i])
    t1 = time() - t0
    print('A* Solution:', astar)
    print('Space (number of instances):', Puzzle.num_of_instances)
    print('Time taken:', t1)
    print()    
print('------------------------------------------')
