Aim-Tic-Tac-Toe Game using Min-Max Algorithm
Code- 
 import numpy as np
from math import inf as infinity
# Set the Empty Board
game_state = [[' ',' ',' '],
              [' ',' ',' '],
              [' ',' ',' ']]
# Create the Two Players as 'X'/'O'
players = ['X', 'O']
# Method for checking the correct move on Tic-Tac-Toe
def play_move(state, player, block_num):
    if state[int((block_num-1)/3)][(block_num-1)%3] == ' ':
        state[int((block_num-1)/3)][(block_num-1)%3] = player
    else:
        block_num = int(input("Block is not empty, ya blockhead! Choose again: "))
        play_move(state, player, block_num)
# Method to copy the current game state to new_state of Tic-Tac-Toe
def copy_game_state(state):
    new_state = [[' ',' ',' '],[' ',' ',' '],[' ',' ',' ']]
    for i in range(3):
        for j in range(3):
            new_state[i][j] = state[i][j]
    return new_state
# Method to check the current state of the Tic-Tac-Toe
def check_current_state(game_state):
    draw_flag = 1
    for i in range(3):
        for j in range(3):
            if game_state[i][j] == ' ':
                draw_flag = 0
    if draw_flag == 1:
        return None, "Draw"
    # Check horizontals
    for i in range(3):
        if game_state[i][0] == game_state[i][1] == game_state[i][2] and game_state[i][0] != ' ':
            return game_state[i][0], "Done"
    # Check verticals
    for j in range(3):
        if game_state[0][j] == game_state[1][j] == game_state[2][j] and game_state[0][j] != ' ':
            return game_state[0][j], "Done"
    # Check diagonals
    if game_state[0][0] == game_state[1][1] == game_state[2][2] and game_state[0][0] != ' ':
        return game_state[0][0], "Done"
    if game_state[0][2] == game_state[1][1] == game_state[2][0] and game_state[0][2] != ' ':
        return game_state[0][2], "Done"
    
    return None, "Not Done"
# Method to print the Tic-Tac-Toe Board
def print_board(game_state):
    print('----------------')
    for row in game_state:
        print('| ' + ' || '.join(row) + ' |')
        print('----------------')
# Method for implementing the Minimax Algorithm
def getBestMove(state, player):
    winner_loser, done = check_current_state(state)
    if done == "Done" and winner_loser == 'O':
        return 1
    elif done == "Done" and winner_loser == 'X':
        return -1
    elif done == "Draw":
        return 0
    moves = []
    empty_cells = []
    for i in range(3):
        for j in range(3):
            if state[i][j] == ' ':
                empty_cells.append(i*3 + (j+1))

    for empty_cell in empty_cells:
        move = {}
        move['index'] = empty_cell
        # Copy the game state
        new_state = copy_game_state(state)
        # Simulate the move
        play_move(new_state, player, empty_cell)
        if player == 'O':
            result = getBestMove(new_state, 'X')
            move['score'] = result
        else:
            result = getBestMove(new_state, 'O')
            move['score'] = resul    
        moves.append(move)
    # Find best move
    best_move = None
    if player == "O":  # Computer's turn
        best = -infinity
        for move in moves:
            if move['score'] > best:
                best = move['score']
                best_move = move['index']
    else:  # Human's turn
        best = infinity
        for move in moves:
            if move['score'] < best:
                best = move['score']
                best_move = move['index']       
    return best_move
# Now Playing the Tic-Tac-Toe Game
play_again = 'Y'
while play_again == 'Y' or play_again == 'y':
    game_state = [[' ',' ',' '],
                  [' ',' ',' '],
                  [' ',' ',' ']]
    current_state = "Not Done"
    print("\nNew Game!")    
    print_board(game_state)
    player_choice = input("Choose which player goes first - X (You) or O(Computer): ")
    winner = None
    if player_choice == 'X' or player_choice == 'x':
        current_player_idx = 0
    else:
        current_player_idx = 1
    while current_state == "Not Done":
        if current_player_idx == 0:  # Human's turn
            block_choice = int(input("Your turn please! Choose where to place (1 to 9): "))
            play_move(game_state, players[current_player_idx], block_choice)
        else:  # Computer's turn
            block_choice = getBestMove(game_state, players[current_player_idx])
            play_move(game_state, players[current_player_idx], block_choice)
            print("AI plays move: " + str(block_choice))
        print_board(game_state)
        winner, current_state = check_current_state(game_state)
        if winner is not None:
            print(str(winner) + " won!")
        else:
            current_player_idx = (current_player_idx + 1) % 2
        if current_state == "Draw":
            print("Draw!")
    play_again = input('Wanna try again?(Y/N) : ')
    if play_again == 'N':
        print('Thank you for playing Tic-Tac-Toe Game!!!!!!!')

